// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.DAL.Persistence;

#nullable disable

namespace WebAPI.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250722213925_AddIndexToQuizName")]
    partial class AddIndexToQuizName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuestionQuiz", b =>
                {
                    b.Property<int>("QuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("QuizzesId")
                        .HasColumnType("int");

                    b.HasKey("QuestionsId", "QuizzesId");

                    b.HasIndex("QuizzesId");

                    b.ToTable("QuizQuestions", (string)null);

                    b.HasData(
                        new
                        {
                            QuestionsId = 1,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 2,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 3,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 4,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 5,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 6,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 7,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 8,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 9,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 10,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 11,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 12,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 13,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 14,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 15,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 16,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 17,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 18,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 19,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 20,
                            QuizzesId = 1
                        },
                        new
                        {
                            QuestionsId = 12,
                            QuizzesId = 2
                        },
                        new
                        {
                            QuestionsId = 13,
                            QuizzesId = 2
                        },
                        new
                        {
                            QuestionsId = 14,
                            QuizzesId = 2
                        },
                        new
                        {
                            QuestionsId = 15,
                            QuizzesId = 2
                        },
                        new
                        {
                            QuestionsId = 16,
                            QuizzesId = 2
                        },
                        new
                        {
                            QuestionsId = 17,
                            QuizzesId = 2
                        },
                        new
                        {
                            QuestionsId = 18,
                            QuizzesId = 2
                        },
                        new
                        {
                            QuestionsId = 19,
                            QuizzesId = 2
                        },
                        new
                        {
                            QuestionsId = 20,
                            QuizzesId = 2
                        },
                        new
                        {
                            QuestionsId = 21,
                            QuizzesId = 2
                        });
                });

            modelBuilder.Entity("WebAPI.DAL.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Answer = "Ag",
                            Text = "Koji je kemijski simbol za srebro?"
                        },
                        new
                        {
                            Id = 2,
                            Answer = "Nazovite me Ishmael",
                            Text = "Koji je prvi stih poznatog romana Moby Dick?"
                        },
                        new
                        {
                            Id = 3,
                            Answer = "Pčelinji hummingbird",
                            Text = "Koja je najmanja ptica na svijetu?"
                        },
                        new
                        {
                            Id = 4,
                            Answer = "Barbara Millicent Roberts",
                            Text = "Kako je Barbieino puno ime?"
                        },
                        new
                        {
                            Id = 5,
                            Answer = "Najglasnija burka",
                            Text = "U čemu Paul Hunn drži rekord, koji je iznosio 118.1 decibela?"
                        },
                        new
                        {
                            Id = 6,
                            Answer = "Cvijeće i drveće",
                            Text = "Koji je bio Disneyjev prvi crtić u boji?"
                        },
                        new
                        {
                            Id = 7,
                            Answer = "Lisabon",
                            Text = "Koji je glavni grad Portugala?"
                        },
                        new
                        {
                            Id = 8,
                            Answer = "20,000",
                            Text = "Koliko udaha ljudsko tijelo napravi dnevno?"
                        },
                        new
                        {
                            Id = 9,
                            Answer = "Robert Peel",
                            Text = "Tko je bio premijer Velike Britanije od 1841. do 1846.?"
                        },
                        new
                        {
                            Id = 10,
                            Answer = "Prodavač rabljenog namještaja",
                            Text = "Koje je zanimanje pisalo na Al Caponeovoj posjetnici?"
                        },
                        new
                        {
                            Id = 11,
                            Answer = "Peter Durand",
                            Text = "Tko je izumio limenku za konzerviranje hrane 1810. godine?"
                        },
                        new
                        {
                            Id = 12,
                            Answer = "Beach Boys",
                            Text = "Koja je američka pop grupa iz 1960-ih stvorila \"surfin\" zvuk'?"
                        },
                        new
                        {
                            Id = 13,
                            Answer = "1964",
                            Text = "U kojoj su godini Beatlesi prvi put otišli u SAD?"
                        },
                        new
                        {
                            Id = 14,
                            Answer = "Nodi Holder",
                            Text = "Tko je bio glavni pjevač pop grupe Slade iz 1970-ih?"
                        },
                        new
                        {
                            Id = 15,
                            Answer = "Slava rodnog grada",
                            Text = "Kako se zvala Adelina prva ploča?"
                        },
                        new
                        {
                            Id = 16,
                            Answer = "Dua Lipa",
                            Text = "\"Future Nostalgia\" koji sadrži singl \"Don't Start Now\" drugi je studijski album s kojeg engleskog pjevača?"
                        },
                        new
                        {
                            Id = 17,
                            Answer = "Kraljica",
                            Text = "Kako se zove bend sa sljedećim članovima: John Deacon, Brian May, Freddie Mercury, Roger Taylor?"
                        },
                        new
                        {
                            Id = 18,
                            Answer = "Michael Jackson",
                            Text = "Koji je pjevač između ostalog bio poznat kao \"Kralj popa\" i \"The Gloved One\"?"
                        },
                        new
                        {
                            Id = 19,
                            Answer = "Justin Bieber",
                            Text = "Koja je američka pop zvijezda postigla uspjeh na ljestvicama 2015. sa singlovima \"Sorry\" i \"Love Yourself\"?"
                        },
                        new
                        {
                            Id = 20,
                            Answer = "Turneja Eras",
                            Text = "Kako se zove najnovija turneja Taylor Swift?"
                        },
                        new
                        {
                            Id = 21,
                            Answer = "Prava vitka sjenka",
                            Text = "Koja pjesma ima sljedeći tekst: \"Mogu li dobiti vašu pozornost, molim/Mogu li dobiti vašu pozornost, molim?\""
                        });
                });

            modelBuilder.Entity("WebAPI.DAL.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kviz opće kulture"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Mali glazbeni kviz"
                        });
                });

            modelBuilder.Entity("QuestionQuiz", b =>
                {
                    b.HasOne("WebAPI.DAL.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.DAL.Models.Quiz", null)
                        .WithMany()
                        .HasForeignKey("QuizzesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
